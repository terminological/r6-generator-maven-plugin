package uk.co.terminological.rjava.plugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.FileUtils;

public abstract class PluginBase extends AbstractMojo {

	@Component
	protected MavenProject mavenProject;
	@Component
	protected MavenSession mavenSession;
	@Component
	protected BuildPluginManager pluginManager;
	@Parameter(required = true)
	protected PackageData packageData;
	@Parameter(required = true)
	protected File outputDirectory;
	protected Path rootDir;

	private void delete(Path t) {
		try {
			Files.delete(t);
		} catch (IOException e1) {
			getLog().warn("couldn't remove: "+t.toString());
		}
	}

	protected void rmContents(Path dir) throws MojoExecutionException {
		try {
			Files.walk(dir).sorted(Comparator.reverseOrder()).filter(f -> !f.equals(dir)).forEach(this::delete);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot remove files in build directory: "+dir,e1);
		}
	}

	protected void rmGenerated(Path dir) throws MojoExecutionException {
		try {
			Files.walk(dir)
				.sorted(Comparator.reverseOrder())
				.filter(f -> !f.equals(dir))
				.filter(f -> {
					try {
						return FileUtils.fileRead(f.toFile()).startsWith("# Generated by r6-generator-maven-plugin");
					} catch (IOException e) {
						return false;
					}
				})
				.forEach(this::delete);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot remove files in build directory: "+dir,e1);
		}
	}

	protected Path jarDir;
	protected Path rDir;
	protected Path manDir;
	protected Path docs;
	protected Path workflows;
	protected String jarFile;
	protected Path jarLoc;
	protected Path pomDir;
	protected String rToPomPath;
	

	public PluginBase() {
		super();
	}

	protected void setupPaths() throws MojoExecutionException {
		rootDir = outputDirectory.toPath();
		jarDir = rootDir.resolve("inst").resolve("java");
		rDir = rootDir.resolve("R");
		manDir = rootDir.resolve("man");
		docs = rootDir.resolve("docs");
		workflows = Paths.get(mavenProject.getBasedir().getPath()).resolve(".github/workflows");
		jarFile = mavenProject.getModel().getBuild().getFinalName()+"-jar-with-dependencies.jar";
		jarLoc = jarDir.resolve(jarFile);
		pomDir = Paths.get(mavenProject.getBasedir().getPath());
		rToPomPath = rootDir.relativize(pomDir).toString();
		
		if( rootDir.startsWith(pomDir) & !rootDir.equals(pomDir)) getLog().warn(
				"The java sources are located outside of the R library. This may make it impossible to compile the sources,"
				+ " and mean the compiled jars must be distributed with the generated java library."
				+ " This will often be too large for CRAN");
		
		
		try {
			Files.createDirectories(jarDir);
			Files.createDirectories(rDir);
			Files.createDirectories(manDir);
			Files.createDirectories(workflows);
			Files.createDirectories(docs);
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot create required directories:",e1);
		}
		
	}

	protected List<String> scanDirectoryForExports(Path rDir) throws MojoExecutionException {
		List<String> additionalExports = new ArrayList<>();
		try {
			Files.walk(rDir)
			.filter(f -> !Files.isDirectory(f))
			.forEach(f -> {
				try {
					String s = FileUtils.fileRead(f.toFile());
					Pattern p = Pattern.compile("@export.*?\\n\\s*([a-zA-Z0-9_\\.]+)\\s*=", Pattern.DOTALL);
					Matcher m = p.matcher(s);
					while(m.find()) {
						additionalExports.add(m.group(1));
					}
				} catch (IOException e) {
					// do nothing
				}
			});
		} catch (IOException e1) {
			throw new MojoExecutionException("Cannot scan source R files for @export statements:",e1);
		}
		return additionalExports;
	}

}
package uk.co.terminological.rjava.plugin;
import static org.twdata.maven.mojoexecutor.MojoExecutor.artifactId;
import static org.twdata.maven.mojoexecutor.MojoExecutor.configuration;
import static org.twdata.maven.mojoexecutor.MojoExecutor.element;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executeMojo;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executionEnvironment;
import static org.twdata.maven.mojoexecutor.MojoExecutor.goal;
import static org.twdata.maven.mojoexecutor.MojoExecutor.groupId;
import static org.twdata.maven.mojoexecutor.MojoExecutor.name;
import static org.twdata.maven.mojoexecutor.MojoExecutor.plugin;
import static org.twdata.maven.mojoexecutor.MojoExecutor.version;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.ArtifactUtils;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.FileUtils;


/**
 * The root of the maven plugin. This is the entry point called by maven.
 */
@Mojo( name = "generate-r-library", defaultPhase = LifecyclePhase.PACKAGE, requiresDependencyResolution = ResolutionScope.RUNTIME )
public class R6GeneratorPlugin extends AbstractMojo {

	@Component
	private MavenProject mavenProject;

	@Component
	private MavenSession mavenSession;

	@Component
	private BuildPluginManager pluginManager;
	
	@Parameter(required=true)
	private PackageData packageData;
	
	@Parameter(required=true)
	private File outputDirectory;
	
	private void delete(Path t) {
		try {
			Files.delete(t);
		} catch (IOException e1) {
			getLog().warn("couldn't remove: "+t.toString());
		}
	}
	
	private void rmContents(Path dir) throws IOException {
		Files.walk(dir).sorted(Comparator.reverseOrder()).filter(f -> !f.equals(dir)).forEach(this::delete);
	}
	
	private void rmGenerated(Path dir) throws IOException {
		Files.walk(dir)
			.sorted(Comparator.reverseOrder())
			.filter(f -> !f.equals(dir))
			.filter(f -> {
				try {
					return FileUtils.fileRead(f.toFile()).startsWith("# Generated by r6-generator-maven-plugin");
				} catch (IOException e) {
					return false;
				}
			})
			.forEach(this::delete);
	}
	
	public void execute() throws MojoExecutionException {
		
		getLog().info("Executing R6 generator");
		// wipe all the directories to prevent build up of old versions
		Path rootDir = outputDirectory.toPath();
		Path jarDir = rootDir.resolve("inst").resolve("java");
		Path rDir = rootDir.resolve("R");
		Path manDir = rootDir.resolve("man");
		Path docs = rootDir.resolve("docs");
		Path workflows = Paths.get(mavenProject.getBasedir().getPath()).resolve(".github/workflows");
		getLog().debug("Wiping previous files.");
		List<String> additionalExports = new ArrayList<>();
		
		try {
			Files.createDirectories(jarDir);
			Files.createDirectories(rDir);
			Files.createDirectories(manDir);
			Files.createDirectories(docs);
			Files.createDirectories(workflows);
			
			rmContents(docs);
			rmContents(jarDir);
			rmContents(manDir);
			
			rmGenerated(workflows);
			rmGenerated(rDir);
			
			// Find additional exports in non-generated R files 
			Files.walk(rDir)
				.filter(f -> !Files.isDirectory(f))
				.forEach(f -> {
					try {
						String s = FileUtils.fileRead(f.toFile());
						Pattern p = Pattern.compile("@export.*?\\n\\s*([a-zA-Z0-9_\\.]+)\\s*=", Pattern.DOTALL);
						Matcher m = p.matcher(s);
						while(m.find()) {
							additionalExports.add(m.group(1));
						}
					} catch (IOException e) {
						// do nothing
					}
				});
			//TODO: additional Imports from doxygen tags? probably not really needed. Should be specified directly in @RClass
			
			
		} catch (IOException e1) {
			throw new MojoExecutionException("Problem tidying up previous runs",e1);
		}
		
		// Assemble and build the fat jar for R plugin
		getLog().debug("Assembling fat jar.");
		executeMojo(
				plugin(
					groupId("org.apache.maven.plugins"),
					artifactId("maven-assembly-plugin"),
					version("3.2.0")),
				goal("single"),
				configuration(
						element(name("descriptorRefs"), 
							element(name("descriptorRef"),"jar-with-dependencies")
						)),
				executionEnvironment(
						mavenProject,
						mavenSession,
						pluginManager));
				
		// Copy the jar the a lib directory
		String jarFile = mavenProject.getModel().getBuild().getFinalName()+"-jar-with-dependencies.jar";
		File targetDir = new File(mavenProject.getModel().getBuild().getDirectory());
		Path jarLoc = jarDir.resolve(jarFile);
		
		// copy the logging jars into the new project.
		// I don;t know why this didn;t work as a maven dependencey of the 
		// runtime project. maybe it would have done.
		getLog().info("Copying library files.");
		try {
			
			Files.createDirectories(rootDir);
			Files.copy(
					Paths.get(targetDir.getAbsolutePath(), jarFile), 
					jarLoc, StandardCopyOption.REPLACE_EXISTING);
			
		} catch (IOException e) {
			throw new MojoExecutionException("Couldn't move fat jar",e);
		}
		
		getLog().debug("Scanning source code.");

		// build the model of the code we are going to use to build the API
		Optional<RModel> model = QDoxParser.scanModel(mavenProject.getCompileSourceRoots(), packageData, getLog());
		if (model.isPresent()) {
				
			RModel m = model.get();
			
			String key = ArtifactUtils.versionlessKey("com.github.terminological","r6-generator-maven-plugin");
			Artifact pluginVersion = (Artifact) mavenProject.getPluginArtifactMap().get(key);
			// TODO: get git commit verison information
			// https://www.baeldung.com/spring-git-information
			m.setPluginMetadata(pluginVersion);
			m.setMavenMetadata(mavenProject);
			m.setRelativePath(mavenProject,rootDir);
					
			
			//write the code to the desired location.
			getLog().debug("Writing R6 library code.");
			RModelWriter writer = new RModelWriter(
					m.withAdditionalExports(additionalExports), 
					outputDirectory,
					jarFile,
					getLog()
					);
			writer.write();
			
		}
		
		if (packageData.useRoxygen2() && !packageData.getDebugMode()) {
			
			// must be an array to stop java tokenising it
			String rCMD[] = {"R","-e","devtools::document(pkg = '"+outputDirectory+"')"};
			getLog().info("Generating roxygen configuration.");
			getLog().debug(Arrays.stream(rCMD).collect(Collectors.joining(" ")));
			// Runtime run = Runtime.getRuntime();
			try {
				ProcessBuilder processBuilder = new ProcessBuilder(rCMD);
				processBuilder.redirectErrorStream(true);
				Process pr = processBuilder.start();
				int res = pr.waitFor();
				BufferedReader buf = new BufferedReader(new InputStreamReader(pr.getInputStream()));
				String line = "";
				if(res != 0) {
					while ((line=buf.readLine())!=null) {
						getLog().error(line);
					}
					throw new MojoExecutionException("ROxygen did not complete normally. The package is probably in an inconsistent state.");
				} else {
					while ((line=buf.readLine())!=null) {
						getLog().info(line);
					}
				}
			} catch (IOException | InterruptedException e) {
				throw new MojoExecutionException("Failed to execute pkgdown", e);
			}
		}
	
		if (packageData.usePkgdown() && !packageData.getDebugMode()) {
			
			// must be an array to stop java tokenising it
			String rCMD[] = {"R","-e","pkgdown::build_site(pkg = '"+outputDirectory+"')"};
			getLog().info("Generating pkgdown site - please be patient");
			getLog().debug(Arrays.stream(rCMD).collect(Collectors.joining(" ")));
			// Runtime run = Runtime.getRuntime();
			try {
				ProcessBuilder processBuilder = new ProcessBuilder(rCMD);
				processBuilder.redirectErrorStream(true);
				Process pr = processBuilder.start();
				int res = pr.waitFor();
				BufferedReader buf = new BufferedReader(new InputStreamReader(pr.getInputStream()));
				String line = "";
				if(res != 0) {
					while ((line=buf.readLine())!=null) {
						getLog().error(line);
					}
					getLog().error("Pkgdown did not complete normally. Details in the log file.");
				} else {
					while ((line=buf.readLine())!=null) {
						getLog().info(line);
					}
				}
			} catch (IOException | InterruptedException e) {
				throw new MojoExecutionException("Failed to execute pkgdown", e);
			}
		}
    
		if (packageData.useJavadoc() && !packageData.getDebugMode()) {
			getLog().info("Generating javadocs");
			executeMojo(
					plugin(
						groupId("org.apache.maven.plugins"),
						artifactId("maven-javadoc-plugin"),
						version("3.2.0")),
					goal("javadoc"),
					configuration(
							element(name("reportOutputDirectory"),docs.toString()),
							element(name("destDir"),"javadoc"),
							element(name("javadocExecutable"),packageData.getJavadocExecutable()),
							element(name("additionalOptions"),
									element(name("additionalOption"),"-header '<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>'"),
									element(name("additionalOption"),"--allow-script-in-comments")),
							element(name("failOnError"),"false")
					),
					executionEnvironment(
							mavenProject,
							mavenSession,
							pluginManager));
		}
	}
	
}
